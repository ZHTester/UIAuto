目前实现
------------------------
------------------------
case层(用例层)   ---  用例执行入口
单独app逻辑控制脚本
主入口调用(多个单独app同时调度跑起来)

----
数据层 ---- 用例管理
Excle-case(元素 坐标 数据 判断)
变量

---
appium 服务端命令层
1 命令行脚本启动appium结合参数使用 --- appium 参数结合
2 Page层封装Driver(iosDriver androidDriver)

---
appium服务端设计  - 通过命令行启动(多线程)appium(不是appium桌面应用程序)  --- server
1 封装执行命令方法层 os命令(非dos命令)
2 重新构建获取设备信息类方法层
3 检测端口是否被占用
4 封装生成可用的端口
5 封装生成启动命令方法层
6 封装多线程启动appium
7 清理appium环境 也就是清楚内存环境
8 通过yaml文件获取启动命令行
9 多线程启动appium和写入到命令文件中
10 多线程 Unitest HtmlRunner appium 串联执行整个单一服务类框架脚本

---
log 日志
记录相关错误日志 元素找不到 下标越界

---
关键字驱动 - 分离页面元素 实际数据 分离实际方法   - 用例执行所以来的逻辑
1 封装操作函数 点击 sendkey 滑动 等等一些方法  actionmethod   截图
2 单个app主逻辑梳理编写  启动ppium服务 获取case数目 循环获取到每个字段 方法放射形式执行用例
3 判断预期元素是否存在 --- 断言效果
4 统计成功失败数 用于发送邮件用
5 压缩图片 用于邮件发送

---  actionmethod 依赖的工具类
工具层
邮箱脚本
获取元素脚本判断 截取 获取by 于 by_local
其他方法 压缩文件 邮件主信息 成功失败个数比例  yaml动态数据获取动态生成appium命令


-----
后续工作
1 动态获取对应设备号或地址 不再写死
1 自动化框架加入接口请求模块  - UI和接口结合  UI为主接口为辅通过Ui跑通全流程
2 完善相关报错信息获取于处理方式
3 UI自动化加入用例成功率、用例增长率等图表展示度量模块
4 多线程同时跑多个自动化UI项目 增加相关效率 降低对应维护成本
5 后续集合 app(android) app(ios) h5 web 对应方法  后续一套代码 同时跑 web app h5 等一些
6 优化测试报告展示方式






